{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Uzair\\\\Desktop\\\\School\\\\Portfolio\\\\DeltaHacks\\\\deltahacks\\\\src\\\\components\\\\DirectionsAux.js\";\nimport React, { Component } from 'react';\nimport { convertLatLngToObj } from '../utility/auxFncs';\nimport { Marker, DirectionsRenderer } from 'react-google-maps';\n\nclass DirectionsAux extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      directions: null,\n      wayPoints: null,\n      currentLocation: null\n    };\n    this.delayFactor = 0;\n\n    this.setCurrentLocation = () => {\n      let count = 0;\n      let refreshIntervalId = setInterval(() => {\n        const locations = this.state.wayPoints;\n\n        if (locations) {\n          if (count <= locations.length - 1) {\n            const currentLocation = convertLatLngToObj(locations[count].lat(), locations[count].lng());\n            this.setState({\n              currentLocation\n            });\n            const wayPts = [];\n            wayPts.push(currentLocation);\n            const startLoc = this.props.from.lat + \", \" + this.props.from.lng;\n            const destinationLoc = this.props.to.lat + \", \" + this.props.to.lng;\n            this.delayFactor = 0;\n            this.getDirections(startLoc, destinationLoc, wayPts);\n            count++;\n          } else {\n            clearInterval(refreshIntervalId);\n          }\n        }\n      }, 1000);\n    };\n  }\n\n  componentDidMount() {\n    const startLoc = this.props.from.lat + \", \" + this.props.from.lng;\n    const destinationLoc = this.props.to.lat + \", \" + this.props.to.lng;\n    this.getDirections(startLoc, destinationLoc);\n    this.setCurrentLocation();\n  }\n\n  async getDirections(startLoc, destinationLoc, wayPoints = []) {\n    const waypts = [];\n\n    if (wayPoints.length > 0) {\n      waypts.push({\n        location: new window.google.maps.LatLng(wayPoints[0].lat, wayPoints[0].lng),\n        stopover: true\n      });\n    }\n\n    const directionService = new window.google.maps.DirectionsService();\n    directionService.route({\n      origin: startLoc,\n      destination: destinationLoc,\n      waypoints: waypts,\n      optimizeWaypoints: true,\n      travelMode: window.google.maps.TravelMode.DRIVING\n    }, (result, status) => {\n      // console.log(\"status\", status);\n      if (status === window.google.maps.DirectionsStatus.OK) {\n        this.setState({\n          directions: result,\n          wayPoints: result.routes[0].overview_path.filter((elem, index) => {\n            return index % 30 === 0;\n          })\n        });\n      } else if (status === window.google.maps.DirectionsStatus.OVER_QUERY_LIMIT) {\n        this.delayFactor += 0.2; // if (this.delayFactor <= 10) this.delayFactor = 0.2;\n\n        setTimeout(() => {\n          this.getDirections(startLoc, destinationLoc, wayPoints);\n        }, this.delayFactor * 200);\n      } else {\n        console.error(`error fetching directions ${result}`);\n      }\n    });\n  }\n\n  render() {\n    let originMarker = null;\n    let destinationMarker = null;\n\n    if (this.state.directions && this.props.index) {\n      originMarker = React.createElement(Marker, {\n        defaultLabel: this.props.index.toString(),\n        defaultIcon: null,\n        position: {\n          lat: parseFloat(this.props.from.lat),\n          lng: parseFloat(this.props.from.lng)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      });\n      destinationMarker = React.createElement(Marker, {\n        label: this.props.index.toString(),\n        defaultIcon: null,\n        position: {\n          lat: parseFloat(this.props.to.lat),\n          lng: parseFloat(this.props.to.lng)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"MapPage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"On Route\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Prototype all possible routes\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"DeltaHacksVI Project 2020\")), originMarker, destinationMarker, this.state.currentLocation && React.createElement(Marker, {\n      label: this.props.index.toString(),\n      position: {\n        lat: this.state.currentLocation.lat,\n        lng: this.state.currentLocation.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), this.state.directions && React.createElement(DirectionsRenderer, {\n      directions: this.state.directions,\n      options: {\n        polylineOptions: {\n          storkeColor: this.props.storkeColor,\n          strokeOpacity: 0.4,\n          strokeWeight: 4\n        },\n        preserveViewport: true,\n        suppressMarkers: true,\n        icon: {\n          scale: 3\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default DirectionsAux;","map":{"version":3,"sources":["C:/Users/Uzair/Desktop/School/Portfolio/DeltaHacks/deltahacks/src/components/DirectionsAux.js"],"names":["React","Component","convertLatLngToObj","Marker","DirectionsRenderer","DirectionsAux","state","directions","wayPoints","currentLocation","delayFactor","setCurrentLocation","count","refreshIntervalId","setInterval","locations","length","lat","lng","setState","wayPts","push","startLoc","props","from","destinationLoc","to","getDirections","clearInterval","componentDidMount","waypts","location","window","google","maps","LatLng","stopover","directionService","DirectionsService","route","origin","destination","waypoints","optimizeWaypoints","travelMode","TravelMode","DRIVING","result","status","DirectionsStatus","OK","routes","overview_path","filter","elem","index","OVER_QUERY_LIMIT","setTimeout","console","error","render","originMarker","destinationMarker","toString","parseFloat","polylineOptions","storkeColor","strokeOpacity","strokeWeight","preserveViewport","suppressMarkers","icon","scale"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { convertLatLngToObj } from '../utility/auxFncs';\r\nimport { Marker, DirectionsRenderer } from 'react-google-maps';\r\n\r\nclass DirectionsAux extends Component {\r\n  state = {\r\n    directions: null,\r\n    wayPoints: null,\r\n    currentLocation: null\r\n  };\r\n  delayFactor = 0;\r\n\r\n  componentDidMount() {\r\n    const startLoc = this.props.from.lat + \", \" + this.props.from.lng;\r\n    const destinationLoc = this.props.to.lat + \", \" + this.props.to.lng;\r\n    this.getDirections(startLoc, destinationLoc);\r\n    this.setCurrentLocation();\r\n  }\r\n\r\n  async getDirections(startLoc, destinationLoc, wayPoints = []) {\r\n    const waypts = [];\r\n\r\n    if (wayPoints.length > 0) {\r\n      waypts.push({\r\n        location: new window.google.maps.LatLng(\r\n          wayPoints[0].lat,\r\n          wayPoints[0].lng\r\n        ),\r\n        stopover: true\r\n      });\r\n    }\r\n\r\n    const directionService = new window.google.maps.DirectionsService();\r\n\r\n    directionService.route(\r\n      {\r\n        origin: startLoc,\r\n        destination: destinationLoc,\r\n        waypoints: waypts,\r\n        optimizeWaypoints: true,\r\n        travelMode: window.google.maps.TravelMode.DRIVING\r\n      },\r\n      (result, status) => {\r\n        // console.log(\"status\", status);\r\n        if (status === window.google.maps.DirectionsStatus.OK) {\r\n          this.setState({\r\n            directions: result,\r\n            wayPoints: result.routes[0].overview_path.filter((elem, index) => {\r\n              return index % 30 === 0;\r\n            })\r\n          });\r\n        } else if (\r\n          status === window.google.maps.DirectionsStatus.OVER_QUERY_LIMIT\r\n        ) {\r\n          this.delayFactor += 0.2;\r\n          // if (this.delayFactor <= 10) this.delayFactor = 0.2;\r\n          setTimeout(() => {\r\n            this.getDirections(startLoc, destinationLoc, wayPoints);\r\n          }, this.delayFactor * 200);\r\n        } else {\r\n          console.error(`error fetching directions ${result}`);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  setCurrentLocation = () => {\r\n    let count = 0;\r\n    let refreshIntervalId = setInterval(() => {\r\n      const locations = this.state.wayPoints;\r\n      if (locations) {\r\n        if (count <= locations.length - 1) {\r\n          const currentLocation = convertLatLngToObj(\r\n            locations[count].lat(),\r\n            locations[count].lng()\r\n          );\r\n          this.setState({ currentLocation });\r\n\r\n          const wayPts = [];\r\n          wayPts.push(currentLocation);\r\n          const startLoc = this.props.from.lat + \", \" + this.props.from.lng;\r\n          const destinationLoc = this.props.to.lat + \", \" + this.props.to.lng;\r\n          this.delayFactor = 0;\r\n          this.getDirections(startLoc, destinationLoc, wayPts);\r\n          count++;\r\n        } else {\r\n          clearInterval(refreshIntervalId);\r\n        }\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  render() {\r\n    let originMarker = null;\r\n    let destinationMarker = null;\r\n    if (this.state.directions && this.props.index) {\r\n      originMarker = (\r\n        <Marker\r\n          defaultLabel={this.props.index.toString()}\r\n          defaultIcon={null}\r\n          position={{\r\n            lat: parseFloat(this.props.from.lat),\r\n            lng: parseFloat(this.props.from.lng)\r\n          }}\r\n        />\r\n      );\r\n      destinationMarker = (\r\n        <Marker\r\n          label={this.props.index.toString()}\r\n          defaultIcon={null}\r\n          position={{\r\n            lat: parseFloat(this.props.to.lat),\r\n            lng: parseFloat(this.props.to.lng)\r\n          }}\r\n        />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"MapPage\">\r\n        <h2><b>On Route</b></h2>\r\n        <p></p>\r\n        <p>Prototype all possible routes</p>\r\n        <p><i>DeltaHacksVI Project 2020</i></p>\r\n        {originMarker}\r\n        {destinationMarker}\r\n        {this.state.currentLocation && (\r\n          <Marker\r\n            label={this.props.index.toString()}\r\n            position={{\r\n              lat: this.state.currentLocation.lat,\r\n              lng: this.state.currentLocation.lng\r\n            }}\r\n          />\r\n        )}\r\n        {this.state.directions && (\r\n          <DirectionsRenderer\r\n            directions={this.state.directions}\r\n            options={{\r\n              polylineOptions: {\r\n                storkeColor: this.props.storkeColor,\r\n                strokeOpacity: 0.4,\r\n                strokeWeight: 4\r\n              },\r\n              preserveViewport: true,\r\n              suppressMarkers: true,\r\n              icon: { scale: 3 }\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DirectionsAux;"]},"metadata":{},"sourceType":"module"}